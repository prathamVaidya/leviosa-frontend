import { useEffect, useRef, useState } from "react";
import io from "socket.io-client";
import "./App.css";

import { IoCallSharp, IoSettings } from "react-icons/io5";
import { MdCallEnd } from "react-icons/md";
import {
  BsFillMicMuteFill,
  BsFillMicFill,
  BsFillCameraVideoOffFill,
  BsFillCameraVideoFill,
} from "react-icons/bs";
import { useParams } from "react-router-dom";

var isChannelReady = false;
var isInitiator = false;
var isStarted = false;
var localStream;
var pc;
var remoteStream;
var turnReady;
const pcConfig = {
  iceServers: [
    {
      urls: ["stun:4.240.81.130:3478?transport=udp'"],
    },
    {
      username: "admin",
      credential: "admin",
      urls: ["turn:4.240.81.130:3478?transport=udp"],
    },
  ],
};

//Set local stream constraints
var localStreamConstraints = {
  audio: true,
  video: true,
};

const socket = io(process.env.REACT_APP_SIGNALLING_SERVER);

function App() {
  const { id } = useParams();
  const [room, setRoom] = useState(id ?? "test");
  const [settings, setSettings] = useState({
    isOpen: true,
  });

  const [call, setCall] = useState({
    audio: true,
    video: true,
  });

  useEffect(() => {
    if (id) {
      setRoom(id);
    }
  }, [id]);

  const [isConnected, setIsConnected] = useState(socket.connected);
  const [lastPong, setLastPong] = useState(null);
  const sourceVideo = useRef();
  const remoteVideo = useRef();

  //Function to send message in a room
  function sendMessage(message, room) {
    console.log("Client sending message: ", message, room);
    socket.emit("message", message, room);
  }

  const initiateVideo = () => {
    navigator.mediaDevices
      .getUserMedia(localStreamConstraints)
      .then(gotStream)
      .catch((e) => console.log(e));

    function gotStream(stream) {
      console.log("Local Stream..");
      localStream = stream;
      sourceVideo.current.srcObject = stream;
      sendMessage("got user media", room);
      if (isInitiator) {
        maybeStart();
        console.log("Maybe Start");
      }
    }
  };

  //Creating peer connection
  function createPeerConnection() {
    try {
      pc = new RTCPeerConnection(pcConfig);
      pc.onicecandidate = handleIceCandidate;
      pc.onaddstream = handleRemoteStreamAdded;
      pc.onremovestream = handleRemoteStreamRemoved;
      console.log("Created RTCPeerConnnection");
    } catch (e) {
      console.log("Failed to create PeerConnection, exception: " + e.message);
      alert("Cannot create RTCPeerConnection object.");
      return;
    }
  }

  function maybeStart() {
    console.log(
      ">>>>>>> maybeStart() ",
      isStarted,
      localStream,
      isChannelReady
    );
    if (!isStarted && typeof localStream !== "undefined" && isChannelReady) {
      console.log(">>>>>> creating peer connection");
      createPeerConnection();
      pc.addStream(localStream);
      isStarted = true;
      console.log("isInitiator", isInitiator);
      if (isInitiator) {
        doCall();
      }
    } else {
    }
  }

  //Function to handle Ice candidates generated by the browser
  function handleIceCandidate(event) {
    console.log("icecandidate event: ", event);
    if (event.candidate) {
      sendMessage(
        {
          type: "candidate",
          label: event.candidate.sdpMLineIndex,
          id: event.candidate.sdpMid,
          candidate: event.candidate.candidate,
        },
        room
      );
    } else {
      console.log("End of candidates.");
    }
  }

  function handleCreateOfferError(event) {
    console.log("createOffer() error: ", event);
  }

  //Function to create offer
  function doCall() {
    console.log("Sending offer to peer");
    pc.createOffer(setLocalAndSendMessage, handleCreateOfferError);
  }

  //Function to create answer for the received offer
  function doAnswer() {
    console.log("Sending answer to peer.");
    pc.createAnswer().then(
      setLocalAndSendMessage,
      onCreateSessionDescriptionError
    );
  }

  //Function to set description of local media
  function setLocalAndSendMessage(sessionDescription) {
    pc.setLocalDescription(sessionDescription);
    console.log("setLocalAndSendMessage sending message", sessionDescription);
    sendMessage(sessionDescription, room);
  }

  function onCreateSessionDescriptionError(error) {
    new Error("Failed to create session description: " + error.toString());
  }

  //Function to play remote stream as soon as this client receives it
  function handleRemoteStreamAdded(event) {
    console.log("Remote stream added.");
    remoteStream = event.stream;
    console.log(remoteStream);
    remoteVideo.current.srcObject = remoteStream;
  }

  function handleRemoteStreamRemoved(event) {
    console.log("Remote stream removed. Event: ", event);
  }

  function hangup() {
    console.log("Hanging up.");
    stop();
    sendMessage("bye", room);
  }

  function handleRemoteHangup() {
    console.log("Session terminated.");
    stop();
    isInitiator = false;
  }

  function stop() {
    isStarted = false;
    pc.close();
    pc = null;
  }

  function handleVideochange() {
    setCall({ ...call, video: !call.video });
  }

  function handleAudioChange() {
    setCall({ ...call, audio: !call.audio });
  }

  useEffect(() => {
    //Event - Client has created the room i.e. is the first member of the room
    init();
  }, []);

  function init() {
    initiateVideo();
    socket.on("message", function (message, room) {
      console.log("Client received message:", message, room);
      if (message === "got user media") {
        maybeStart();
      } else if (message.type === "offer") {
        if (!isInitiator && !isStarted) {
          maybeStart();
        }
        pc.setRemoteDescription(new RTCSessionDescription(message));
        doAnswer();
      } else if (message.type === "answer" && isStarted) {
        pc.setRemoteDescription(new RTCSessionDescription(message));
      } else if (message.type === "candidate" && isStarted) {
        var candidate = new RTCIceCandidate({
          sdpMLineIndex: message.label,
          candidate: message.candidate,
        });
        pc.addIceCandidate(candidate);
      } else if (message === "bye" && isStarted) {
        handleRemoteHangup();
      }
    });

    socket.on("log", (arr) => {
      console.log(arr);
    });

    socket.on("created", function (room) {
      console.log("Created room " + room);
      isInitiator = true;
    });

    socket.on("full", function (room) {
      console.log("Room " + room + " is full");
    });

    //Event - Another client tries to join room
    socket.on("join", function (room) {
      console.log("Another peer made a request to join room " + room);
      console.log("This peer is the initiator of room " + room + "!");
      isChannelReady = true;
    });

    //Event - Client has joined the room
    socket.on("joined", function (room) {
      console.log("joined: " + room);
      isChannelReady = true;
    });

    //Sending bye if user closes the window
    window.onbeforeunload = function () {
      sendMessage("bye", room);
    };
  }

  const handleClick = () => {
    if (room !== "") {
      socket.emit("create or join", room);
      console.log("Attempted to create or join room", room);
      init();
      setSettings({ ...settings, isOpen: false });
    }
  };

  return (
    <div className="App bg-primary h-screen text-secondary relative">
      {settings.isOpen && (
        <div className=" h-screen w-screen fixed bg-opacity-80 flex items-center justify-center">
          <div
            className="bg-black h-screen w-screen fixed bg-opacity-80"
            onClick={() => {
              setSettings({ ...settings, isOpen: false });
            }}
          ></div>
          <div className="flex flex-col items-center justify-center bg-gray-800 absolute p-5 rounded-lg">
            <h1 className="text-lg font-bold p-2">Leviosa</h1>
            <input
              type="text"
              className="py-2 px-4 border-white border-2 rounded-sm bg-gray-900"
              placeholder="Enter Room Name"
              value={room}
              onChange={(e) => {
                setRoom(e.target.value);
              }}
            />
            <button
              onClick={handleClick}
              className="p-2 px-4 w-full m-4 rounded-sm bg-secondary text-primary active:opacity-70 hover:scale-105 transition-all"
            >
              Join Room
            </button>
          </div>
        </div>
      )}

      <div className="grid h-full grid-cols-12 gap-4">
        <div className="col-span-9 grid grid-flow-row p-12 ">
          <div className="flex items-center justify-center text-2xl font-bold">
            Leviosa
          </div>
          <div className="grid-cols-1 flex items-center justify-center p-4 ">
            <div className="">
              {/* {!call.audio && (
                <BsFillMicMuteFill className="absolute top-5 left-5" />
              )} */}
              <video
                className="rounded-lg bg-gray-800"
                width={900}
                height={500}
                autoPlay
                muted
                playsInline
                ref={remoteVideo}
                hidden
              ></video>
            </div>
          </div>
          <div>
            <div className="p-2 flex gap-8 items-center justify-center my-8">
              <button
                className="bg-white p-4 rounded-full active:scale-105 transition-all"
                onClick={handleAudioChange}
              >
                {call.audio ? (
                  <BsFillMicFill size={28} className="text-gray-800" />
                ) : (
                  <BsFillMicMuteFill size={28} className="text-gray-900 " />
                )}
              </button>

              {/* <button
                className="bg-green-400 p-4 rounded-full active:scale-105 active:bg-green-500 transition-all"
                onClick={() => setSettings({ settings, isOpen: true })}
              >
                <IoCallSharp size={28} />
              </button> */}
              <button
                className="bg-red-400 p-4 rounded-full active:scale-105 active:bg-red-500 transition-all"
                onClick={hangup}
              >
                <MdCallEnd size={28} />
              </button>
              <button
                className="bg-white p-4 rounded-full active:scale-105  transition-all"
                onClick={handleVideochange}
              >
                {call.video ? (
                  <BsFillCameraVideoFill size={28} className="text-gray-800" />
                ) : (
                  <BsFillCameraVideoOffFill
                    size={28}
                    className="text-gray-800"
                  />
                )}
              </button>
              <button
                className="bg-white p-4 rounded-full active:scale-105 transition-all"
                onClick={() => setSettings({ ...settings, isOpen: true })}
              >
                <IoSettings size={28} className="text-gray-800" />
              </button>
            </div>
          </div>
        </div>

        <div className="col-span-3 flex flex-col justify-end items-center p-4 my-20">
          <div className="relative">
            {!call.audio && (
              <BsFillMicMuteFill className="absolute top-5 left-5" />
            )}
            <video
              className="rounded-md bg-gray-800"
              autoPlay
              muted
              playsInline
              width={300}
              height={200}
              ref={sourceVideo}
            ></video>
          </div>
          <div className="flex items-center justify-center font-bold p-2">
            You
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
